<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrency on Go设计实现内幕</title>
    <link>https://hitzhangjie.pro/tags/concurrency/</link>
    <description>Recent content in concurrency on Go设计实现内幕</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://hitzhangjie.pro/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rethinking classical concurrency patterns</title>
      <link>https://hitzhangjie.pro/posts/rethinking-classical-concurrency-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hitzhangjie.pro/posts/rethinking-classical-concurrency-patterns/</guid>
      <description>Let&amp;rsquo;s Summarize #  We started with asynchronous patterns, which deal with goroutines. Then, we looked at condition variables, which sometimes deal with resources.
Now, let&amp;quot;s put them together. The Worker Pool is a pattern that treats a set of goroutines as resources.
Just a note on terminology: in other languages the pattern is usually called a “thread pool”, but in Go we&amp;quot;re working with goroutines, so we just call them workers.</description>
    </item>
    
  </channel>
</rss>
