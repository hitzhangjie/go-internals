<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tdd, test on Go设计实现内幕</title><link>https://hitzhangjie.pro/go-internals/tags/tdd-test/</link><description>Recent content in tdd, test on Go设计实现内幕</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://hitzhangjie.pro/go-internals/tags/tdd-test/index.xml" rel="self" type="application/rss+xml"/><item><title>learn-go-with-tests</title><link>https://hitzhangjie.pro/go-internals/docs/Testing/learn-go-with-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hitzhangjie.pro/go-internals/docs/Testing/learn-go-with-tests/</guid><description>Let&amp;rsquo;s Summarize # 通过测试来学习go的使用，掌握tdd测试驱动开发模式。
tdd遵循如下开发模式：
write a test make the compiler pass run test, see that it fails and check the error message is meaningful write enough code to make the test pass refactor tdd遵循上述流程的意义：
write a failing test and see it fail so we know we have written a relevant test for our requirements and seen that it produces an easy to understand description of the failure writing the smallest amount of code to make it pass so we know we have working software then refactor, backed with the safety of our tests to ensure we have well-crafted code that is easy to work with red、green、refactor： throughout this book， we have emphasised the tdd process of:</description></item><item><title>learn-go-with-tests</title><link>https://hitzhangjie.pro/go-internals/posts/learn-go-with-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hitzhangjie.pro/go-internals/posts/learn-go-with-tests/</guid><description>Let&amp;rsquo;s Summarize # 通过测试来学习go的使用，掌握tdd测试驱动开发模式。
tdd遵循如下开发模式：
write a test make the compiler pass run test, see that it fails and check the error message is meaningful write enough code to make the test pass refactor tdd遵循上述流程的意义：
write a failing test and see it fail so we know we have written a relevant test for our requirements and seen that it produces an easy to understand description of the failure writing the smallest amount of code to make it pass so we know we have working software then refactor, backed with the safety of our tests to ensure we have well-crafted code that is easy to work with red、green、refactor： throughout this book， we have emphasised the tdd process of:</description></item></channel></rss>